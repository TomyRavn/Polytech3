<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
<!-- 빈(Bean) : 본래는 Java Beans라는 규약(규칙)을 지켜서 만든 객체를 의미 -->
<!-- 최근에는 아래 2가지 정도의 조건만 만족하면 Bean 이라고 부르며, -->
<!-- - 인자 없는 생성자가 존재 -->
<!-- - 속성(멤버 변수, 필드)에 대한 getter/setter 메서드가 존재하는 객체  -->
<!-- 사실상 인스턴스(객체)와 동일한 단어처럼 사용되고 있다. -->

<!-- com.exam.MyApp 클래스의 객체(인스턴스)를 생성(new)하여 ma라는 이름으로 스프링에 등록 -->
<!-- <bean id="ma" class="com.exam.MyApp"> -->
<!-- MyApp 객체의 myService 변수(속성)에, 스프링에 msen이라는 이름으로 등록된 객체를 주입(저장) -->
<!-- <property name="myService" ref="msko"></property> -->
<!-- </bean> -->

<!-- com.exam.MyServiceEn 클래스의 객체(인스턴스)를 생성(new)하여 msen라는 이름으로 스프링에 등록 -->
<!-- <bean id="msen" class="com.exam.MyServiceEn"></bean> -->
<!-- com.exam.MyServiceKo 클래스의 객체(인스턴스)를 생성(new)하여 msko라는 이름으로 스프링에 등록 -->
<!-- <bean id="msko" class="com.exam.MyServiceKo"></bean> -->

<!-- com.exam 패키지(폴더) 아래에 있는 클래스들 중 @Component가 붙은 클래스들의 객체를 생성하여 스프링에 등록 -->
<!-- @component 대신 객체의 역할에 따라서 @Controller, @Service, @Respository 등 사용 가능 -->
<context:component-scan base-package="com.exam"></context:component-scan>

<!-- AOP를 사용하여 끼워넣을 코드(메서드)를 담고 있는 클래스 등록 -->
<bean id="myAdv" class="com.exam.MyAdvice"></bean>

<!-- AOP 설정 -->
<aop:config>
<!-- pointcut : 코드를 끼워넣을 지점 -->
<aop:pointcut expression="execution(* com.exam.MyApp.*(..))" id="myPoint"/>

<!-- 어떤 코드(Advice)를 어느 지점(Pointcut)의 어느 순간에 끼워넣을 지 설정 -->
<aop:aspect ref="myAdv">
<!-- 포인트컷 메서드가 실행되기 전에 끼워넣기 -->
<aop:before method="log" pointcut-ref="myPoint"/>
<!-- 포인트 컷 메서드가 정상적으로 실행된 후에 끼워넣기 -->
<aop:after-returning method=""/>
<!-- 포인트 컷 메서드가 실행 중 예외가 발생된 경우에 끼워넣기 -->
<aop:after-throwing method=""/>
<!-- 포인트 컷 메서드가 실행 후에 끼워넣기(정상종료, 예외발생 상관 없음) -->
<aop:around method=""/>
<!-- 포인트컷 메서드의 실행 전과 후에 끼워넣기 -->
<aop:after method=""/>
</aop:aspect>
</aop:config>

</beans>
