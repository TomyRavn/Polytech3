1. window > preferences > encoding 'UTF-8' 등 설정
2. perspectives : 똑같은 프로젝트를 어떤 방향으로 보는지(사용자 편의 화면 설정)

- jsp : 생산성, php 생산성 -> 좋음
jsp : 보안문제 발생 -> web-inf로 숨기는 이유
webapp 밑에 있다가 web-inf

META-INF
WEB-INF
서블릿 규격에 정해져있음(클라이언트가 절대로 접속하지 못하게 정해져있음)
따라서, jsp가 web-inf로 내려가서 클라이언트에게 노출되지 못하도록 함

유일한 경로가 servlet -> 따라서 servlet만 지키면 됨

jsp로 만든 사이트는 창이 많은 집


structs framework -> /.do 는 옛날

예전에는 servletcontext가 많았지만
지금은 dispatcher servlet context 만이 남았고,
root-context, servlet-context가 거의 차이없는 상태


dao 만들고 mapper X?

추세 : 다 annotation으로 바꾸어 버려서 xml이 필요없게 만든다
jsp 도 없애려고 하는 상황(spring boot? dot 5.0 ??)
jsp가 아니라 그냥 html로


xml은 줄고 annotation 늘어나고
jsp는 줄고 javascript와 html이 다시 보완하는 추세

인터페이스를 보고 호출하니까
서로간의 영향을 줄일 수 있어서
언제든지 바꿀 수 있다

특정이름 -> 막내(추상화) : 언제든지 대체가 가능하다(인터페이스)

spring 철학(목표) : 설정보다 관례(@Mapper -> 패키지명/메소드명과 같은 아이디 등에 쿼리문이 있을것이다 라고 의례 생각)
(기본적으로 개발자들이 알고있다라는 의레 그렇게 해온 것)


이름 중복성(C : function 명이 같으면 안됨) 때문에 도메인명을 뒤집는 방식으로 의미를 이해할 수 있게 패키지명 설정
톰캣 8.0까지는 이클립스에서 download and install 버튼이 활성화되어 다운로드 지원
eclipse나 tomcat등은 경로 바로 밑에 설정해주는게 좋다(C:/)

contextpath를 쓰지 않는 것을 권장
jsp 개발자를 모집하는 것은 옛날 회사
jsp : 그냥 view이므로 code가 들어가면 안됨(jsp를 하는 사람이 java를 알 필요없게)
el 이나 jstl을 쓴다는 것은 java가 아니지만, <% >가 들어가는 것은 java

run as에서 겹치는 path의 프로젝트를 remove하면 충돌 방지
spring은 jsp단위가 아닌 어플리케이션 단위(예 -> yes24.com만 치면 들어가게(세부 주소 기재 X)

pojo : 모든 자바 클래스는 pojo라고 생각하면 됨

structure framework (예 : servlet -> do get, do post에 코드 작성)  -> 망함
j2b와 같은 진입장벽이 높은 기술 사용 탈피 -> Spring

spring의 고민 : 기존 legacy 등 프로젝트를 재사용할 수 있게 하자 -> 기존의 프로젝트를 pojo라고 지정
특정한 클래스, 인터페이스를 만들 필요가 없도록 하자는 것이 대전제(annotation으로 처리- annotation 이전에는 xml에 정리해서 xml로 처리)

annotation은 소스코드에 직접 적어, 개발자가 이해하기가 쉬워짐 -> xml과 annotation을 섞어 쓰는 형태의 템플릿이 legacy project

현재 추세 : annotation만(설정 ; xml을 하는 것을 필요 없도록)

Spring 4.XX가 가장 많이 쓰이고 있음

viewResolver에게 보내면 view를 호출

di : dependency injection?

spring : 4.2 이상 -> 4.3.5 교수님 추천

spring jdbc, mybatis, mybatis spring, connection pool(hikari? dbcp)

어떤 db를 쓸지 생각(oracle, mysql 등)
maven과 gradle

클라이언트가 서버로 request를 보냈을 때 controller가 받아서 처리하는데 처리 전에 필터가 전처리를 해줌
filter는 servlet(tomcat; container 단위에서) 처리
interceptor는 container를 지나 spring framework로 가기전에 처리

db access는 root-context에 삽입하는 것이 깔끔해보임

ojdbc5 = java 1.5 / ojdbc6 = java 1.6
원래는 pom.xml 대신에 jar파일을 lib에 다 넣었어야 함(현재는 pom.xml에서 Maven이 대신해줌)

database에 연결하는 connection
몇 명이나 데이터에 접근할 수 있는지.
사람들이 접속을 많이 하면 굉장히 느려진다.

방법 : 4개든 5개든 미리 연결해놓고, 연결된 connection 객체를 pool에 넣고, 요구(조회) 가 오면, connection pool에서 하나를 뽑아 씀.
close 하지 않고, 다 쓴 connection을 다시 pool에 넣음.
다 쓰고 있으면, dbcp2라는 친구가 하나 더 생성해줌. 다시 이용자가 줄어들면, 다시 줄여서 적정 수준을 유지시켜주는 역할을 해주는 것이 connection pool


만약에 connection관리를 제대로 해주지 못하거나 query 성능이 낮은 성능을 일으키면,
고객은 로딩이 느리면 새로고침을 하고 새로고침을 여러번 하다보면 시스템이 죽는 상황도 발생
따라서. dbcp2가 무료로 쓸수있는 커넥션 풀중 가장 좋은 편인데, 최근 hikari cp가 좋다고 대두되고 있어서 종종 쓰임.

xml은 스키마 방식이 있고 dtd방식이있는데
mybatis는 dtd방식을 씀

- Ctrl + F11 = 파일 개념 실행
- Run as -> 어플리케이션 개념 실행(Alt + Shift + X, R)

패키지(기능적 또는 종류별 등)

인터페이스는 아무것도 할수 없으므로 구현체 필요
인터페이스는 단일상속의 단점을 보완 가능

jstl은 el을 보완하기 위해 필요
el에는 구조적인 내용이 없으므로 jstl을 사용

jar : 자
war : 와
ajax : 에이잭(스)

url : 어떤 컴퓨터에 어떤 폴더에 있는 어떤 파일
예) /book/list : book 아래 있는 list 파일 // /book/list/ : book 아래 있는 list 폴더

1. 익숙해진다