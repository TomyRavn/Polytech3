<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

<!-- 빈(bean) : 본래는 Java Beans 라는 규약(규칙)을 지켜서 만든 객체를 의미 // 객체를 등록 -->
<!-- 		 - 최근에는 인자없는 생성자가 존재하고, 속성(멤버변수, 필드)에 대한 getter/setter 메서드가 존재하는 객체면 bean이라 칭함 -->
<!-- 		       사실상 인스턴스(객체)와 동일한 단어처럼 사용되고 있다. -->
<!-- com.exam.MyApp 클래스의 객체(인스턴스)를 생성(new)하여 ma라는 이름으로 스프링에 등록 -->
<!-- 	<bean id="ma" class="com.exam.MyApp"> -->
<!-- 	MyApp객체의 myService변수(속성)에, msen이라는 이름으로 스프링에 등록된 객체를 주입(저장) -->
<!-- 		<property name="myService" ref="msen"></property> -->
<!-- 		<property name="myService" ref="msko"></property> -->
<!-- 	</bean> -->

<!-- com.exam.MyServiceEn 클래스의 객체(인스턴스)를 생성(new)하여 msen라는 이름으로 스프링에 등록 -->
<!-- 	<bean id="msen" class="com.exam.MyServiceEn"></bean> -->
<!-- 	<bean id="msko" class="com.exam.MyServiceKo"></bean> -->

<!-- =========================================================== -->

<!-- com.exam 패키지(폴더) 아래에 있는 클래스들 중, @Component가 붙은 클래스들의 객체를 생성하여 스프링에 등록 -->
<!-- @Component 대신 객체의 역할에 따라서 @Controller, @Service, @Repository 등 사용 가능 -->
	<context:component-scan base-package="com.exam"></context:component-scan>

<!-- AOP를 사용하여 끼워넣을 코드(메서드)를 담고 있는 클래스(Advice) 등록 -->
	<bean id="myAdv" class="com.exam.MyAdvice"></bean>
	
<!-- AOP 설정 -->
	<aop:config>
<!-- pointcut : 코드를 끼워넣을 지점 -->
<!-- expression : 표현식 // 반환타입, 클래스 메소드 //(..) : 파라미터 갯수에 상관없음 ( 0 이상 )-->
		<aop:pointcut expression="execution(* com.exam.*.*Hello*(..))" id="myPoint" />	<!-- *Hello* : 메소드 이름에 Hello가 들어가는 경우 -->
<!-- 어떤 코드(Advice)를 어느 지점(pointcut)의 어느 순간에 끼워넣을지 설정  -->
<!-- Advice : 끼워넣을 코드 또는 끼워넣을 코드를 갖고 있는 클래스 -->
		<aop:aspect ref="myAdv">
<!-- 		포인트컷 메서드가 실행되기 전에 끼워넣기 -->
			<aop:before method="log" pointcut-ref="myPoint"/>
			
<!-- 		before : pointcut 실행되기 전 // returning : 정상적으로 실행된 후 // after : 실행된 후 // arount : 실행 전+후 // throwing 실행 중 예외 발생시에 -->
<!-- 		pointcut : 직접 정의, pointcut-ref : 미리 만들어둔 것 참조 -->
		</aop:aspect>
	</aop:config>
	

</beans>