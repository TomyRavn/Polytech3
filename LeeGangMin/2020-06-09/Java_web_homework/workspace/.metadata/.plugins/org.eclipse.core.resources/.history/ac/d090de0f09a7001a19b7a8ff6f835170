package kr.ac.kopo.member;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


//요청받았을 때 사용되는 것들(Servlet) 을 Controller
//보여줄 때 사용되는 것들(jsp) 을 View
//dao, vo 등의 클래스는 Model (핵심 비즈니스 모델) dao는 사실 model이라고 잘 칭하지 않고, vo와 service가 모델의 핵심(데이터를 담은 클래스와 중간에 껴서 요청과 db와 분리된 클래스)
// + service라는 클래스까지 포함하여 Model이라고 지칭
//==> MVC 패턴 이라고하며, Model2 방식이라고 함
//ps. Model1방식은 jsp 안에서 모든 것을 다 처리하는 방식

@WebServlet("/member/list.do")
public class MemberListServlet extends HttpServlet{
	
	
	MemberDaoJdbc memberDao = new MemberDaoJdbc(); //객체 생성을 반복할 필요없음
	
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		//리스트를 전달할 필요성 -> 요청객체에 담아서 준다
		ArrayList<MemberVo> memberList = memberDao.selectMemberList();
		req.setAttribute("memList", memberList);	//요청객체에 "memList"라는 사용자정의이름으로 memberlist 데이터를 저장
		
		//"*/ex_web/WebContent
		// /WEB-INF/jsp/member/memList.jsp" 파일로 이동
		//현재 파일을 위임하여 처리할 수 있도록 하는 디스패쳐 가져오기
		//RequestDispatcher rd = req.getRequestDispatcher("/WEB-INF/jsp/member/memList.jsp");
		
		req.getRequestDispatcher("/WEB-INF/jsp/member/memList.jsp").forward(req, resp);	//현재 요청객체와 응답객체를 전달해주면서 이동
		
//		rd에는 forward -> 맡기고 jsp로 다시 가져올 필요없다.
//		include -> 맡기고 다시 작업해야할때 다시 이리로 오게끔함
	}
	
}